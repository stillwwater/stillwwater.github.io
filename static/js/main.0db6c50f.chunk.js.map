{"version":3,"sources":["components/Header.tsx","components/Archive.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Navigation","className","to","href","Header","PostLink","props","post","link","name","date","readtime","Archive","useState","posts","setPosts","useEffect","fetch","then","res","json","catch","err","console","error","map","index","key","Post","md","MarkdownIt","highlight","str","lang","hljs","getLanguage","value","__","html","linkify","use","require","default","permalink","level","permalinkBefore","slugify","match","params","toLowerCase","replace","contents","setContents","file","filter","length","document","title","text","dangerouslySetInnerHTML","__html","render","NotFound","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0db6c50f.chunk.js","sourcesContent":["import React from 'react';\nimport {Link} from 'react-router-dom'\n\nimport \"./Header.css\"\n\nexport function Navigation() {\n  return (\n    <div className=\"header-nav\">\n      <ul>\n        <li><Link to=\"/\">archive</Link></li>\n        <li><a href=\"https://github.com/stillwwater\">github</a></li>\n      </ul>\n    </div>\n  );\n}\n\nexport function Header() {\n  return (\n    <div className=\"header\">\n      <div className=\"header-title\">\n        <Link to=\"/\"><h1>quadwords</h1></Link>\n      </div>\n      <Navigation />\n    </div>\n  );\n}\n","import React, {useState, useEffect} from 'react';\nimport {Link} from 'react-router-dom';\nimport MarkdownIt from 'markdown-it';\nimport hljs from 'highlight.js';\n\nimport './Archive.css';\n\nconst PostsIndex = \"posts.json\";\n\ntype PostMetadata = {\n  name: string,\n  file: string,\n  link: string,\n  date?: string,\n  readtime?: number,\n};\n\nfunction makePostUrl(post: PostMetadata): string {\n  return `a/${post.link}`;\n}\n\nfunction PostLink(props: {post: PostMetadata}) {\n  return (\n    <Link to={makePostUrl(props.post)} className=\"archive-post\">\n      <span className=\"archive-post-name\">\n        <h3>{props.post.name}</h3>\n      </span>\n      <span className=\"archive-post-date\">\n        {props.post.date && props.post.date}\n        {props.post.readtime\n          && `${props.post.date ? ' \\u2022 ' : ''}\n            ${props.post.readtime} min read`}\n      </span>\n    </Link>\n  );\n}\n\nexport function Archive() {\n  const [posts, setPosts]: [PostMetadata[], any] = useState([]);\n\n  useEffect(() => {\n    fetch(PostsIndex)\n      .then(res => res.json())\n      .then((posts: PostMetadata[]) => setPosts(posts))\n      .catch(err => console.error(err));\n  }, [setPosts]);\n\n  return (\n    <div className=\"archive\">\n      <ul>\n        {posts.map((post, index) =>\n          <li key={index}>\n            <PostLink post={post} />\n          </li>\n        )}\n      </ul>\n    </div>\n  );\n}\n\nexport function Post(props: any) {\n  const md = new MarkdownIt({\n    highlight: function (str, lang) {\n      if (lang && hljs.getLanguage(lang)) {\n        try {\n          return hljs.highlight(lang, str).value;\n        } catch (__) {/* Don't highlight */}\n      }\n      return '';\n    },\n    html: true,\n    linkify: true,\n  });\n\n  md.use(require('markdown-it-anchor').default, {\n    permalink: true,\n    // Don't show permalink for the post title header\n    level: 2,\n    permalinkBefore: false,\n    // Link format: /a/article-name/section-name\n    slugify: (str: string) =>\n      `a/${props.match.params.post}/` +\n        str.toLowerCase().replace(/\\s+/g, '-').replace(/[^a-zA-Z0-9-]/g, ''),\n  });\n\n  const [contents, setContents] = useState('');\n\n  useEffect(() => {\n    const post = props.match.params.post;\n    const file = `${post}.md`;\n    if (!post) {\n      return;\n    }\n    // Make sure the url is valid\n    fetch(PostsIndex)\n      .then(res => res.json())\n      .then((posts: PostMetadata[]) => {\n        const match = posts.filter(post => post.file === file);\n        if (match.length === 0) {\n          setContents('# 404\\nThe post you are looking for no longer exists.');\n          return;\n        }\n        document.title = `${match[0].name} \\u2014 quadwords`;\n        // Get the markdown contents\n        fetch(`posts/${file}`)\n          .then(res => res.text())\n          .then(text => setContents(text))\n          .catch(err => console.error(err));\n      })\n      .catch(err => console.error(err));\n      return () => {\n        // Cleanup\n        document.title = 'quadwords \\u2014 by stillwwater';\n      };\n  }, [setContents, props.match.params.post]);\n\n  return (\n    <div className=\"post\">\n      <div dangerouslySetInnerHTML={{__html: md.render(contents)}} />\n    </div>\n  );\n}\n","import React from 'react';\nimport {HashRouter, Switch, Route} from 'react-router-dom';\nimport {Header} from './Header'\nimport {Archive, Post} from './Archive'\n\nimport './App.css'\n\nfunction NotFound() {\n  return (\n    <div className=\"post\">\n      <h1>404</h1>\n      <p>The page you are looking for does not exist.</p>\n    </div>\n  );\n}\n\nexport default function App() {\n  return (\n    <div className=\"app\">\n      <div className=\"container\">\n        <HashRouter>\n          <Header />\n          <Switch>\n            <Route exact path=\"/\" component={Archive} />\n            <Route path=\"/a/:post\" component={Post} />\n            <Route component={NotFound} />\n          </Switch>\n        </HashRouter>\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}